##Name: <Pourna Sengupta>

##CSCI 3308 Lab 7 

###Answer Scripts


##SECTION 3

#3.1 :Write an SQL Script to create a new table to hold information on the competing universities. The table should hold the following information:

  University Name (Text) (Note: University Name should be unique and set as PRIMARY KEY)
  Date Established (Date)
  Address (Address)
  Student Population (Int)
  Acceptance Rate (Decimal)

>> 

CREATE TABLE IF NOT EXISTS 
universities( university_name VARCHAR(200) PRIMARY KEY, 
date_est DATE NOT NULL, 
address TEXT NOT NULL, 
student_pop INT NOT NULL, 
acceptance_rate DECIMAL(5, 2)); 



#3.2 Write an insert statement to add the University Information The table should hold the following information:

       University Name :- CU Boulder
       Date Established :- 1876
       Address :- 1100 28th St, Boulder, CO 80303
       Student Population :- 35,000
       Acceptance Rate :- 80%

>>

INSERT INTO 
universities(university_name, date_est, address, student_pop, acceptance_rate) 
VALUES('CU Boulder', '1876-04-01', '1100 28th St, Boulder, CO 80303', 35000, 80.00);



##SECTION 4

#4.1 Write a script to list the Football Players (name & major), organized by major in college.

>>
SELECT name, major 
FROM football_players
ORDER BY major; 

/*name        | major 
-------------------+-------
 Cedric Vega       | ARTS
 Wade Farmer       | ARTS
 Erick Graves      | ARTS
 Jared Castillo    | ARTS
 Doyle Huff        | CSCI
 Myron Walters     | CSCI
 Charles Porter    | CSCI
 Melba Pope        | MATH
 Rafael Boreous    | MATH
 Javier Washington | MATH
(10 rows)
*/


#4.2 Write a script to list all of the Football Players (name & rushing yards) who have 70 or more rushing yards.

>>
SELECT name, rushing_yards 
FROM football_players 
WHERE rushing_yards >= 70
ORDER BY rushing_yards ASC; 

/*      name      | rushing_yards 
----------------+---------------
 Erick Graves   |            78
 Charles Porter |           102
 Rafael Boreous |           111
 Jared Castillo |           113
(4 rows)
*/


#4.3 Write a script to list all of the games played against Nebraska (show all game information).

>>

SELECT visitor_name, home_score, visitor_score, game_date, players
FROM football_games 
WHERE visitor_name = 'Nebraska'; 

/* visitor_name | home_score | visitor_score | game_date  |   players   
--------------+------------+---------------+------------+-------------
 Nebraska     |         33 |            28 | 2020-09-08 | {2,3,4,5,6}
(1 row)
*/


#4.4 Write a script to list all of the games CU Boulder has won.

>>

SELECT visitor_name, home_score, visitor_score, game_date, players
FROM football_games 
WHERE home_score > visitor_score; 

/*  visitor_name  | home_score | visitor_score | game_date  |   players   
----------------+------------+---------------+------------+-------------
 Colorado State |         45 |            13 | 2020-08-31 | {1,2,3,4,5}
 Nebraska       |         33 |            28 | 2020-09-08 | {2,3,4,5,6}
 New Hampshire  |         45 |            14 | 2020-09-15 | {3,4,5,6,7}
 UCLA           |         38 |            16 | 2020-09-28 | {4,5,6,7,8}
 Arizona State  |         28 |            21 | 2020-10-06 | {5,6,7,8,9}
(5 rows)
*/



#4.5 Write a script to list all of the games played in the Fall 2020 Season (show team name & game date).

>>

SELECT visitor_name, game_date
FROM football_games 
WHERE game_date BETWEEN '2020-09-01' AND '2020-12-31'; 

/*visitor_name     | game_date  
---------------------+------------
 Nebraska            | 2020-09-08
 New Hampshire       | 2020-09-15
 UCLA                | 2020-09-28
 Arizona State       | 2020-10-06
 Southern California | 2020-10-13
 Washington          | 2020-10-20
 Oregon State        | 2020-10-27
 Arizona             | 2020-11-02
 Washington State    | 2020-11-10
 Utah                | 2020-11-17
 California          | 2020-11-24
(11 rows)*/

#4.6 Write a script to list the average number of points CU has scored in past games.

>>

SELECT AVG(home_score) AS AvgScore
FROM football_games; 

/*avgscore       
---------------------
 27.0833333333333333
(1 row)*/


#4.7 Write a script to list the majors of the Football players and calculate how many of them are in each of the majors listed. Rename the column where you calculate the majors to number_of_players.

>>

SELECT major, COUNT(major) AS number_of_players
FROM football_players 
GROUP BY major; 

/* major | number_of_players 
-------+-------------------
 CSCI  |                 3
 ARTS  |                 4
 MATH  |                 3
(3 rows)
*/



#4.8 Write a script to modify the above query in 5.6 to include only the Football players who are majoring in Computer Science.

>>

SELECT major, COUNT(major) AS number_of_players
FROM football_players 
WHERE major = 'CSCI'
GROUP BY major; 

/* major | number_of_players 
-------+-------------------
 CSCI  |                 3
(1 row)
*/


##SECTION 5

#5.1 Write a script to create a view that counts the total number of winning games.

>>

CREATE VIEW winning_games  
AS SELECT COUNT(home_score) AS num_of_wins
FROM football_games
WHERE home_score > visitor_score; 

/* winning_games
-----------------
              5
(1 row) */



#5.2 Write a script to create a view that counts the total number of games played.

>>

CREATE VIEW games 
AS SELECT COUNT(*) AS num_of_games
FROM football_games; 

/*   games
-----------------
              12
(1 row) */



#5.3 Write a script that uses the two views you created (from 6.1 and 6.2) to calculate the percent of wins.

>>

SELECT(
	(CAST(winning_games.COUNT AS DECIMAL)/CAST(games.COUNT AS DECIMAL))*100) AS Percent_Of_Wins 
    FROM winning_games, games; 
    
/* percent_of_wins
-----------------
41.66666666666667
(1 row) */




##SECTION 6

#6.1 Write a script that will count how many games "Cedric Vega" has played in during his entire football career.

>>

SELECT COUNT(*)
FROM football_players
INNER JOIN football_games 
	ON football_players.id = ANY(football_games.players) 
WHERE football_players.name = 'Cedric Vega'; 

/* count 
-------
     6
(1 row)*/


#6.2 Write a script that will calculate the average number of rushing yards for "Cedric Vega", based on the number of games he has played.

>>

CREATE VIEW c_vega_games 
AS SELECT * 
FROM football_players 
INNER JOIN football_games 
	ON football_players.id = ANY(football_games.players) 
WHERE football_players.name = 'Cedric Vega'; 


SELECT CAST(c_vega_games.rushing_yards AS DECIMAL)/CAST(c_vega_games.count AS DECIMAL)
FROM c_vega_games
GROUP BY rushing_yards; 


/*    ?column?      
--------------------
 4.1666666666666667
(1 row)*/





